---
export const prerender = false;

import BaseLayout from '@quest/ui/layouts/base.astro';
import Header from '@quest/ui/components/Header.astro';
import Hero from '@quest/ui/components/Hero.astro';
import ArticleCardFeatured from '@quest/ui/components/ArticleCardFeatured.astro';
import ArticleCardGrid from '@quest/ui/components/ArticleCardGrid.astro';
import Footer from '@quest/ui/components/Footer.astro';
import { initializeSql, getRecentArticles } from '@quest/db';

// Initialize Neon - handle missing DATABASE_URL gracefully
const databaseUrl = import.meta.env.DATABASE_URL;
if (!databaseUrl) {
  throw new Error('DATABASE_URL environment variable is not set. Please add it in Vercel settings.');
}

initializeSql(databaseUrl);

// Extract just first word of SITE_NAME for database query (e.g., "Placement Quest" -> "placement")
const siteName = (import.meta.env.SITE_NAME?.split(' ')[0] || 'placement').toLowerCase();
const recentArticles = await getRecentArticles(siteName, 10);

// Get site info from env
const fullSiteName = import.meta.env.SITE_NAME || 'Placement Quest';
const siteTagline = import.meta.env.SITE_TAGLINE || 'Navigate the evolving landscape';
const themeVariant = import.meta.env.THEME_VARIANT || 'financial';

// Separate featured article from grid
const featuredArticle = recentArticles?.[0];
const gridArticles = recentArticles?.slice(1) || [];
---

<BaseLayout title={fullSiteName} description={siteTagline}>
  <!-- Header -->
  <Header siteName={fullSiteName} themeVariant={themeVariant} />

  <!-- Hero Section -->
  <Hero siteName={fullSiteName} siteTagline={siteTagline} />

  <!-- Main Content -->
  <main class="mx-auto max-w-7xl px-4 lg:px-8 py-12 lg:py-16">
    {/* Featured Article Section */}
    {featuredArticle && (
      <section class="mb-16">
        <div class="flex items-center justify-between mb-8">
          <h2 class="text-3xl lg:text-4xl font-bold">Featured Story</h2>
        </div>
        <ArticleCardFeatured article={featuredArticle} />
      </section>
    )}

    {/* Recent Articles Grid */}
    {gridArticles.length > 0 && (
      <section>
        <div class="flex items-center justify-between mb-8">
          <h2 class="text-3xl lg:text-4xl font-bold">Recent Articles</h2>
          <a href="/articles" class="btn btn-primary btn-outline btn-sm">
            View All
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-4 w-4"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"
              ></path>
            </svg>
          </a>
        </div>
        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {gridArticles.map((article) => (
            <ArticleCardGrid article={article} />
          ))}
        </div>
      </section>
    )}
  </main>

  <!-- Footer -->
  <Footer siteName={fullSiteName} />
</BaseLayout>
